# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_halSwig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_halSwig')
    _halSwig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_halSwig', [dirname(__file__)])
        except ImportError:
            import _halSwig
            return _halSwig
        if fp is not None:
            try:
                _mod = imp.load_module('_halSwig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _halSwig = swig_import_helper()
    del swig_import_helper
else:
    import _halSwig
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _halSwig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _halSwig.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _halSwig.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _halSwig.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _halSwig.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _halSwig.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _halSwig.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _halSwig.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _halSwig.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _halSwig.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _halSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _halSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _halSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _halSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _halSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _halSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _halSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _halSwig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class everloopImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, everloopImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, everloopImage, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _halSwig.everloopImage_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _halSwig.everloopImage___nonzero__(self)

    def __bool__(self) -> "bool":
        return _halSwig.everloopImage___bool__(self)

    def __len__(self) -> "std::vector< led >::size_type":
        return _halSwig.everloopImage___len__(self)

    def __getslice__(self, i: 'std::vector< led >::difference_type', j: 'std::vector< led >::difference_type') -> "std::vector< led,std::allocator< led > > *":
        return _halSwig.everloopImage___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _halSwig.everloopImage___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< led >::difference_type', j: 'std::vector< led >::difference_type') -> "void":
        return _halSwig.everloopImage___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _halSwig.everloopImage___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< led >::value_type const &":
        return _halSwig.everloopImage___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _halSwig.everloopImage___setitem__(self, *args)

    def pop(self) -> "std::vector< led >::value_type":
        return _halSwig.everloopImage_pop(self)

    def append(self, x: 'led') -> "void":
        return _halSwig.everloopImage_append(self, x)

    def empty(self) -> "bool":
        return _halSwig.everloopImage_empty(self)

    def size(self) -> "std::vector< led >::size_type":
        return _halSwig.everloopImage_size(self)

    def swap(self, v: 'everloopImage') -> "void":
        return _halSwig.everloopImage_swap(self, v)

    def begin(self) -> "std::vector< led >::iterator":
        return _halSwig.everloopImage_begin(self)

    def end(self) -> "std::vector< led >::iterator":
        return _halSwig.everloopImage_end(self)

    def rbegin(self) -> "std::vector< led >::reverse_iterator":
        return _halSwig.everloopImage_rbegin(self)

    def rend(self) -> "std::vector< led >::reverse_iterator":
        return _halSwig.everloopImage_rend(self)

    def clear(self) -> "void":
        return _halSwig.everloopImage_clear(self)

    def get_allocator(self) -> "std::vector< led >::allocator_type":
        return _halSwig.everloopImage_get_allocator(self)

    def pop_back(self) -> "void":
        return _halSwig.everloopImage_pop_back(self)

    def erase(self, *args) -> "std::vector< led >::iterator":
        return _halSwig.everloopImage_erase(self, *args)

    def __init__(self, *args):
        this = _halSwig.new_everloopImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'led') -> "void":
        return _halSwig.everloopImage_push_back(self, x)

    def front(self) -> "std::vector< led >::value_type const &":
        return _halSwig.everloopImage_front(self)

    def back(self) -> "std::vector< led >::value_type const &":
        return _halSwig.everloopImage_back(self)

    def assign(self, n: 'std::vector< led >::size_type', x: 'led') -> "void":
        return _halSwig.everloopImage_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _halSwig.everloopImage_resize(self, *args)

    def insert(self, *args) -> "void":
        return _halSwig.everloopImage_insert(self, *args)

    def reserve(self, n: 'std::vector< led >::size_type') -> "void":
        return _halSwig.everloopImage_reserve(self, n)

    def capacity(self) -> "std::vector< led >::size_type":
        return _halSwig.everloopImage_capacity(self)
    __swig_destroy__ = _halSwig.delete_everloopImage
    __del__ = lambda self: None
everloopImage_swigregister = _halSwig.everloopImage_swigregister
everloopImage_swigregister(everloopImage)

class led(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, led, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, led, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _halSwig.new_led(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_led
    __del__ = lambda self: None
    __swig_setmethods__["r"] = _halSwig.led_r_set
    __swig_getmethods__["r"] = _halSwig.led_r_get
    if _newclass:
        r = _swig_property(_halSwig.led_r_get, _halSwig.led_r_set)
    __swig_setmethods__["g"] = _halSwig.led_g_set
    __swig_getmethods__["g"] = _halSwig.led_g_get
    if _newclass:
        g = _swig_property(_halSwig.led_g_get, _halSwig.led_g_set)
    __swig_setmethods__["b"] = _halSwig.led_b_set
    __swig_getmethods__["b"] = _halSwig.led_b_get
    if _newclass:
        b = _swig_property(_halSwig.led_b_get, _halSwig.led_b_set)
    __swig_setmethods__["w"] = _halSwig.led_w_set
    __swig_getmethods__["w"] = _halSwig.led_w_get
    if _newclass:
        w = _swig_property(_halSwig.led_w_get, _halSwig.led_w_set)
led_swigregister = _halSwig.led_swigregister
led_swigregister(led)
cvar = _halSwig.cvar

class everloop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, everloop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, everloop, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _halSwig.new_everloop()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_everloop
    __del__ = lambda self: None
    __swig_setmethods__["ledCount"] = _halSwig.everloop_ledCount_set
    __swig_getmethods__["ledCount"] = _halSwig.everloop_ledCount_get
    if _newclass:
        ledCount = _swig_property(_halSwig.everloop_ledCount_get, _halSwig.everloop_ledCount_set)

    def set(self, x: 'everloopImage') -> "void":
        return _halSwig.everloop_set(self, x)
everloop_swigregister = _halSwig.everloop_swigregister
everloop_swigregister(everloop)

class gpio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpio, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _halSwig.new_gpio()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_gpio
    __del__ = lambda self: None

    def setMode(self, pin: 'int', mode: 'int') -> "bool":
        return _halSwig.gpio_setMode(self, pin, mode)

    def setFunction(self, pin: 'int', pinFunction: 'int') -> "bool":
        return _halSwig.gpio_setFunction(self, pin, pinFunction)

    def getValue(self, pin: 'int') -> "int":
        return _halSwig.gpio_getValue(self, pin)

    def getValues(self) -> "int":
        return _halSwig.gpio_getValues(self)

    def setDigital(self, pin: 'int', value: 'int') -> "bool":
        return _halSwig.gpio_setDigital(self, pin, value)

    def setPWM(self, pin: 'int', percentage: 'float', frequency: 'float') -> "bool":
        return _halSwig.gpio_setPWM(self, pin, percentage, frequency)

    def setServoAngle(self, pin: 'int', angle: 'float', min_pulse_ms: 'float') -> "bool":
        return _halSwig.gpio_setServoAngle(self, pin, angle, min_pulse_ms)
gpio_swigregister = _halSwig.gpio_swigregister
gpio_swigregister(gpio)

class info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, info, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _halSwig.new_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_info
    __del__ = lambda self: None

    def isDirectBus(self) -> "bool":
        return _halSwig.info_isDirectBus(self)
info_swigregister = _halSwig.info_swigregister
info_swigregister(info)

class imu_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imu_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imu_values, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accel_x"] = _halSwig.imu_values_accel_x_set
    __swig_getmethods__["accel_x"] = _halSwig.imu_values_accel_x_get
    if _newclass:
        accel_x = _swig_property(_halSwig.imu_values_accel_x_get, _halSwig.imu_values_accel_x_set)
    __swig_setmethods__["accel_y"] = _halSwig.imu_values_accel_y_set
    __swig_getmethods__["accel_y"] = _halSwig.imu_values_accel_y_get
    if _newclass:
        accel_y = _swig_property(_halSwig.imu_values_accel_y_get, _halSwig.imu_values_accel_y_set)
    __swig_setmethods__["accel_z"] = _halSwig.imu_values_accel_z_set
    __swig_getmethods__["accel_z"] = _halSwig.imu_values_accel_z_get
    if _newclass:
        accel_z = _swig_property(_halSwig.imu_values_accel_z_get, _halSwig.imu_values_accel_z_set)
    __swig_setmethods__["gyro_x"] = _halSwig.imu_values_gyro_x_set
    __swig_getmethods__["gyro_x"] = _halSwig.imu_values_gyro_x_get
    if _newclass:
        gyro_x = _swig_property(_halSwig.imu_values_gyro_x_get, _halSwig.imu_values_gyro_x_set)
    __swig_setmethods__["gyro_y"] = _halSwig.imu_values_gyro_y_set
    __swig_getmethods__["gyro_y"] = _halSwig.imu_values_gyro_y_get
    if _newclass:
        gyro_y = _swig_property(_halSwig.imu_values_gyro_y_get, _halSwig.imu_values_gyro_y_set)
    __swig_setmethods__["gyro_z"] = _halSwig.imu_values_gyro_z_set
    __swig_getmethods__["gyro_z"] = _halSwig.imu_values_gyro_z_get
    if _newclass:
        gyro_z = _swig_property(_halSwig.imu_values_gyro_z_get, _halSwig.imu_values_gyro_z_set)
    __swig_setmethods__["yaw"] = _halSwig.imu_values_yaw_set
    __swig_getmethods__["yaw"] = _halSwig.imu_values_yaw_get
    if _newclass:
        yaw = _swig_property(_halSwig.imu_values_yaw_get, _halSwig.imu_values_yaw_set)
    __swig_setmethods__["pitch"] = _halSwig.imu_values_pitch_set
    __swig_getmethods__["pitch"] = _halSwig.imu_values_pitch_get
    if _newclass:
        pitch = _swig_property(_halSwig.imu_values_pitch_get, _halSwig.imu_values_pitch_set)
    __swig_setmethods__["roll"] = _halSwig.imu_values_roll_set
    __swig_getmethods__["roll"] = _halSwig.imu_values_roll_get
    if _newclass:
        roll = _swig_property(_halSwig.imu_values_roll_get, _halSwig.imu_values_roll_set)
    __swig_setmethods__["mag_x"] = _halSwig.imu_values_mag_x_set
    __swig_getmethods__["mag_x"] = _halSwig.imu_values_mag_x_get
    if _newclass:
        mag_x = _swig_property(_halSwig.imu_values_mag_x_get, _halSwig.imu_values_mag_x_set)
    __swig_setmethods__["mag_y"] = _halSwig.imu_values_mag_y_set
    __swig_getmethods__["mag_y"] = _halSwig.imu_values_mag_y_get
    if _newclass:
        mag_y = _swig_property(_halSwig.imu_values_mag_y_get, _halSwig.imu_values_mag_y_set)
    __swig_setmethods__["mag_z"] = _halSwig.imu_values_mag_z_set
    __swig_getmethods__["mag_z"] = _halSwig.imu_values_mag_z_get
    if _newclass:
        mag_z = _swig_property(_halSwig.imu_values_mag_z_get, _halSwig.imu_values_mag_z_set)

    def __init__(self):
        this = _halSwig.new_imu_values()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_imu_values
    __del__ = lambda self: None
imu_values_swigregister = _halSwig.imu_values_swigregister
imu_values_swigregister(imu_values)

class imu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imu, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _halSwig.new_imu()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_imu
    __del__ = lambda self: None

    def read(self) -> "imu_values":
        return _halSwig.imu_read(self)
imu_swigregister = _halSwig.imu_swigregister
imu_swigregister(imu)

class uv_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uv_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uv_values, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uv"] = _halSwig.uv_values_uv_set
    __swig_getmethods__["uv"] = _halSwig.uv_values_uv_get
    if _newclass:
        uv = _swig_property(_halSwig.uv_values_uv_get, _halSwig.uv_values_uv_set)

    def __init__(self):
        this = _halSwig.new_uv_values()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_uv_values
    __del__ = lambda self: None
uv_values_swigregister = _halSwig.uv_values_swigregister
uv_values_swigregister(uv_values)

class uv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uv, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _halSwig.new_uv()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_uv
    __del__ = lambda self: None

    def read(self) -> "uv_values":
        return _halSwig.uv_read(self)
uv_swigregister = _halSwig.uv_swigregister
uv_swigregister(uv)

class humidity_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, humidity_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, humidity_values, name)
    __repr__ = _swig_repr
    __swig_setmethods__["humidity"] = _halSwig.humidity_values_humidity_set
    __swig_getmethods__["humidity"] = _halSwig.humidity_values_humidity_get
    if _newclass:
        humidity = _swig_property(_halSwig.humidity_values_humidity_get, _halSwig.humidity_values_humidity_set)
    __swig_setmethods__["temperature"] = _halSwig.humidity_values_temperature_set
    __swig_getmethods__["temperature"] = _halSwig.humidity_values_temperature_get
    if _newclass:
        temperature = _swig_property(_halSwig.humidity_values_temperature_get, _halSwig.humidity_values_temperature_set)

    def __init__(self):
        this = _halSwig.new_humidity_values()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_humidity_values
    __del__ = lambda self: None
humidity_values_swigregister = _halSwig.humidity_values_swigregister
humidity_values_swigregister(humidity_values)

class humidity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, humidity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, humidity, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _halSwig.new_humidity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_humidity
    __del__ = lambda self: None

    def read(self) -> "humidity_values":
        return _halSwig.humidity_read(self)
humidity_swigregister = _halSwig.humidity_swigregister
humidity_swigregister(humidity)

class pressure_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pressure_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pressure_values, name)
    __repr__ = _swig_repr
    __swig_setmethods__["altitude"] = _halSwig.pressure_values_altitude_set
    __swig_getmethods__["altitude"] = _halSwig.pressure_values_altitude_get
    if _newclass:
        altitude = _swig_property(_halSwig.pressure_values_altitude_get, _halSwig.pressure_values_altitude_set)
    __swig_setmethods__["pressure"] = _halSwig.pressure_values_pressure_set
    __swig_getmethods__["pressure"] = _halSwig.pressure_values_pressure_get
    if _newclass:
        pressure = _swig_property(_halSwig.pressure_values_pressure_get, _halSwig.pressure_values_pressure_set)
    __swig_setmethods__["temperature"] = _halSwig.pressure_values_temperature_set
    __swig_getmethods__["temperature"] = _halSwig.pressure_values_temperature_get
    if _newclass:
        temperature = _swig_property(_halSwig.pressure_values_temperature_get, _halSwig.pressure_values_temperature_set)

    def __init__(self):
        this = _halSwig.new_pressure_values()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_pressure_values
    __del__ = lambda self: None
pressure_values_swigregister = _halSwig.pressure_values_swigregister
pressure_values_swigregister(pressure_values)

class pressure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pressure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pressure, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _halSwig.new_pressure()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _halSwig.delete_pressure
    __del__ = lambda self: None

    def read(self) -> "pressure_values":
        return _halSwig.pressure_read(self)
pressure_swigregister = _halSwig.pressure_swigregister
pressure_swigregister(pressure)

# This file is compatible with both classic and new-style classes.


